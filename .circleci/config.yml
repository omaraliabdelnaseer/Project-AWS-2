version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  install_awscli:
    docker:
      - image: cimg/python:3.10
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    docker:
      - image: cimg/python:3.10
    steps:
      - run:
          name: Install Ansible
          command: |
           python3 -m pip install --user ansible

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-front-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text) \
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt \
            cat .circleci/ansible/inventory.txt


  configure-infrastructure:
      docker:
        - image: cimg/python:3.10
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["5c:60:34:7a:7f:7d:fd:02:6f:8f:a9:71:24:bc:c6:a3"]
        - run:
           name: Install dependencies
           command: |
             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
             unzip awscliv2.zip
             sudo ./aws/install
             python3 -m pip install --user ansible
        - attach_workspace:
            at: ~/
        - run:
            name: Configure server
            command: |
              # add environment variables to server
              echo ENVIRONMENT=production > backend/.env
              echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
              echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
              echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
              echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
              cat backend/.env
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
  run-migrations:
      docker:
        - image: circleci/node:13.8.0 # safest to use to avoid migration errors
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              sudo apt install -y tar gzip curl
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -qq awscliv2.zip
              sudo ./aws/install
        - restore_cache:
           keys: [backend-build]
        - attach_workspace:
           at: ~/
        - run:
            name: Run migrations
            command: |
              cd backend
              npm run migrations >> migrations.txt
        - run:
            name: Send migration results to kvdb
            command: |
              if grep -q "success" ~/project/backend/migrations.txt
              then
              curl --insecure https://kvdb.io/ViWzkdySLpmD9TMMzU5Fzq/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]    
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]